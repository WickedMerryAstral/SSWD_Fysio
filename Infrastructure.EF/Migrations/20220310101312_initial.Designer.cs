// <auto-generated />
using System;
using Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.EF.Migrations
{
    [DbContext(typeof(FysioDBContext))]
    [Migration("20220310101312_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentId"), 1L, 1);

                    b.Property<int>("patientFileId")
                        .HasColumnType("int");

                    b.Property<int?>("practitionerId1")
                        .HasColumnType("int");

                    b.HasKey("commentId");

                    b.HasIndex("commentId")
                        .IsUnique();

                    b.HasIndex("patientFileId");

                    b.HasIndex("practitionerId1");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientId"), 1L, 1);

                    b.Property<int>("patientFileId")
                        .HasColumnType("int");

                    b.HasKey("patientId");

                    b.HasIndex("patientFileId");

                    b.HasIndex("patientId")
                        .IsUnique();

                    b.ToTable("patients");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.Property<int>("patientFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientFileId"), 1L, 1);

                    b.Property<int?>("intakeByPractitionerpractitionerId")
                        .HasColumnType("int");

                    b.Property<int?>("supervisedByPractitionerpractitionerId")
                        .HasColumnType("int");

                    b.Property<int?>("treatmentPlanId1")
                        .HasColumnType("int");

                    b.HasKey("patientFileId");

                    b.HasIndex("intakeByPractitionerpractitionerId");

                    b.HasIndex("patientFileId")
                        .IsUnique();

                    b.HasIndex("supervisedByPractitionerpractitionerId");

                    b.HasIndex("treatmentPlanId1");

                    b.ToTable("patientFiles");
                });

            modelBuilder.Entity("Core.Domain.Practitioner", b =>
                {
                    b.Property<int>("practitionerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("practitionerId"), 1L, 1);

                    b.HasKey("practitionerId");

                    b.HasIndex("practitionerId")
                        .IsUnique();

                    b.ToTable("practitioners");
                });

            modelBuilder.Entity("Core.Domain.Treatment", b =>
                {
                    b.Property<int>("treatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("treatmentId"), 1L, 1);

                    b.Property<int?>("practitionerId1")
                        .HasColumnType("int");

                    b.Property<int>("treatmentPlanId")
                        .HasColumnType("int");

                    b.HasKey("treatmentId");

                    b.HasIndex("practitionerId1");

                    b.HasIndex("treatmentId")
                        .IsUnique();

                    b.HasIndex("treatmentPlanId");

                    b.ToTable("treatments");
                });

            modelBuilder.Entity("Core.Domain.TreatmentPlan", b =>
                {
                    b.Property<int>("treatmentPlanId")
                        .HasColumnType("int");

                    b.HasKey("treatmentPlanId");

                    b.HasIndex("treatmentPlanId")
                        .IsUnique();

                    b.ToTable("treatmentPlans");
                });

            modelBuilder.Entity("Core.Domain.Comment", b =>
                {
                    b.HasOne("Core.Domain.PatientFile", "patientFile")
                        .WithMany("comments")
                        .HasForeignKey("patientFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Practitioner", "practitioner")
                        .WithMany()
                        .HasForeignKey("practitionerId1");

                    b.Navigation("patientFile");

                    b.Navigation("practitioner");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.HasOne("Core.Domain.PatientFile", "patientFile")
                        .WithMany()
                        .HasForeignKey("patientFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patientFile");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.HasOne("Core.Domain.Practitioner", "intakeByPractitioner")
                        .WithMany()
                        .HasForeignKey("intakeByPractitionerpractitionerId");

                    b.HasOne("Core.Domain.Practitioner", "supervisedByPractitioner")
                        .WithMany()
                        .HasForeignKey("supervisedByPractitionerpractitionerId");

                    b.HasOne("Core.Domain.TreatmentPlan", "treatmentPlan")
                        .WithMany()
                        .HasForeignKey("treatmentPlanId1");

                    b.Navigation("intakeByPractitioner");

                    b.Navigation("supervisedByPractitioner");

                    b.Navigation("treatmentPlan");
                });

            modelBuilder.Entity("Core.Domain.Treatment", b =>
                {
                    b.HasOne("Core.Domain.Practitioner", "practitioner")
                        .WithMany()
                        .HasForeignKey("practitionerId1");

                    b.HasOne("Core.Domain.TreatmentPlan", "treatmentPlan")
                        .WithMany("treatments")
                        .HasForeignKey("treatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("practitioner");

                    b.Navigation("treatmentPlan");
                });

            modelBuilder.Entity("Core.Domain.TreatmentPlan", b =>
                {
                    b.HasOne("Core.Domain.Practitioner", "practitioner")
                        .WithMany("treatmentPlans")
                        .HasForeignKey("treatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("practitioner");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.Navigation("comments");
                });

            modelBuilder.Entity("Core.Domain.Practitioner", b =>
                {
                    b.Navigation("treatmentPlans");
                });

            modelBuilder.Entity("Core.Domain.TreatmentPlan", b =>
                {
                    b.Navigation("treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
